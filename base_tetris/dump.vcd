$date
	Sat Dec 19 14:45:36 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module _tetris $end
$var wire 8 # action [7:0] $end
$var wire 80 $ border [79:0] $end
$var wire 1 % clk $end
$var wire 8 & figure [7:0] $end
$var wire 16 ' instr [15:0] $end
$var wire 8 ( instr_addr [7:0] $end
$var wire 1 ) is_load_PC $end
$var wire 1 * is_load_fig $end
$var wire 1 + is_lose $end
$var wire 1 , is_move $end
$var wire 1 - is_reduce $end
$var wire 1 . is_touch $end
$var wire 1 / is_wait $end
$var wire 80 0 new_border [79:0] $end
$var wire 8 1 new_instr_addr [7:0] $end
$var wire 32 2 new_rho_x [31:0] $end
$var wire 32 3 new_rho_y [31:0] $end
$var wire 32 4 rho_x [31:0] $end
$var wire 32 5 rho_y [31:0] $end
$var wire 1 6 rst $end
$var wire 1 7 write_mem $end
$var wire 1 8 write_reg $end
$scope module _PC $end
$var wire 1 % clk $end
$var wire 8 9 in [7:0] $end
$var wire 1 ) load $end
$var wire 1 6 rst $end
$var reg 8 : out [7:0] $end
$upscope $end
$scope module _adder_plus_one $end
$var wire 1 % clk $end
$var wire 8 ; out [7:0] $end
$var wire 1 6 rst $end
$var wire 8 < x [7:0] $end
$var wire 8 = y [7:0] $end
$upscope $end
$scope module _inst $end
$var wire 1 % clk $end
$var wire 8 > curr_command [7:0] $end
$var wire 1 + is_lose $end
$var wire 1 . is_touch $end
$var wire 16 ? out_data [15:0] $end
$var wire 8 @ player_action [7:0] $end
$var wire 8 A prng_data [7:0] $end
$var wire 1 6 rst $end
$var reg 8 B action [7:0] $end
$var reg 8 C data [7:0] $end
$var reg 1 D enable $end
$scope module LCG_instance $end
$var wire 1 % clk $end
$var wire 1 E enable $end
$var wire 8 F out [7:0] $end
$var wire 1 6 rst $end
$scope begin $gen12 $end
$scope module lcg18_0 $end
$upscope $end
$upscope $end
$upscope $end
$scope module player $end
$var wire 1 % clk $end
$var wire 8 G command [7:0] $end
$var wire 1 H next_bit $end
$var wire 1 6 rst $end
$var reg 32 I shift_reg [31:0] $end
$upscope $end
$upscope $end
$scope module _border_regs $end
$var wire 1 J I_fig $end
$var wire 1 K Q_fig $end
$var wire 80 L border [79:0] $end
$var wire 1 % clk $end
$var wire 8 M figure [7:0] $end
$var wire 1 * is_load_fig $end
$var wire 1 N load_to_reg $end
$var wire 80 O new_border [79:0] $end
$var wire 32 P new_rho_x [31:0] $end
$var wire 32 Q new_rho_y [31:0] $end
$var wire 32 R rho_x [31:0] $end
$var wire 32 S rho_y [31:0] $end
$var wire 1 6 rst $end
$var wire 1 8 write_reg $end
$var reg 32 T rst_x_value [31:0] $end
$var reg 32 U rst_y_value [31:0] $end
$scope begin border_block[0] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 V in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 W rst_value [7:0] $end
$var reg 8 X out [7:0] $end
$var reg 1 Y without_load $end
$upscope $end
$upscope $end
$scope begin border_block[1] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 Z in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 [ rst_value [7:0] $end
$var reg 8 \ out [7:0] $end
$var reg 1 ] without_load $end
$upscope $end
$upscope $end
$scope begin border_block[2] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 ^ in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 _ rst_value [7:0] $end
$var reg 8 ` out [7:0] $end
$var reg 1 a without_load $end
$upscope $end
$upscope $end
$scope begin border_block[3] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 b in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 c rst_value [7:0] $end
$var reg 8 d out [7:0] $end
$var reg 1 e without_load $end
$upscope $end
$upscope $end
$scope begin border_block[4] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 f in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 g rst_value [7:0] $end
$var reg 8 h out [7:0] $end
$var reg 1 i without_load $end
$upscope $end
$upscope $end
$scope begin border_block[5] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 j in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 k rst_value [7:0] $end
$var reg 8 l out [7:0] $end
$var reg 1 m without_load $end
$upscope $end
$upscope $end
$scope begin border_block[6] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 n in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 o rst_value [7:0] $end
$var reg 8 p out [7:0] $end
$var reg 1 q without_load $end
$upscope $end
$upscope $end
$scope begin border_block[7] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 r in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 s rst_value [7:0] $end
$var reg 8 t out [7:0] $end
$var reg 1 u without_load $end
$upscope $end
$upscope $end
$scope begin border_block[8] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 v in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 w rst_value [7:0] $end
$var reg 8 x out [7:0] $end
$var reg 1 y without_load $end
$upscope $end
$upscope $end
$scope begin border_block[9] $end
$scope module _border $end
$var wire 1 % clk $end
$var wire 8 z in [7:0] $end
$var wire 1 8 load $end
$var wire 1 6 rst $end
$var wire 8 { rst_value [7:0] $end
$var reg 8 | out [7:0] $end
$var reg 1 } without_load $end
$upscope $end
$upscope $end
$scope begin rho_x_block[0] $end
$scope module _rho_x $end
$var wire 1 % clk $end
$var wire 8 ~ in [7:0] $end
$var wire 1 8 load $end
$var wire 1 !" rst $end
$var wire 8 "" rst_value [7:0] $end
$var reg 8 #" out [7:0] $end
$var reg 1 $" without_load $end
$upscope $end
$scope module _rho_y $end
$var wire 1 % clk $end
$var wire 8 %" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 &" rst $end
$var wire 8 '" rst_value [7:0] $end
$var reg 8 (" out [7:0] $end
$var reg 1 )" without_load $end
$upscope $end
$upscope $end
$scope begin rho_x_block[1] $end
$scope module _rho_x $end
$var wire 1 % clk $end
$var wire 8 *" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 +" rst $end
$var wire 8 ," rst_value [7:0] $end
$var reg 8 -" out [7:0] $end
$var reg 1 ." without_load $end
$upscope $end
$scope module _rho_y $end
$var wire 1 % clk $end
$var wire 8 /" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 0" rst $end
$var wire 8 1" rst_value [7:0] $end
$var reg 8 2" out [7:0] $end
$var reg 1 3" without_load $end
$upscope $end
$upscope $end
$scope begin rho_x_block[2] $end
$scope module _rho_x $end
$var wire 1 % clk $end
$var wire 8 4" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 5" rst $end
$var wire 8 6" rst_value [7:0] $end
$var reg 8 7" out [7:0] $end
$var reg 1 8" without_load $end
$upscope $end
$scope module _rho_y $end
$var wire 1 % clk $end
$var wire 8 9" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 :" rst $end
$var wire 8 ;" rst_value [7:0] $end
$var reg 8 <" out [7:0] $end
$var reg 1 =" without_load $end
$upscope $end
$upscope $end
$scope begin rho_x_block[3] $end
$scope module _rho_x $end
$var wire 1 % clk $end
$var wire 8 >" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 ?" rst $end
$var wire 8 @" rst_value [7:0] $end
$var reg 8 A" out [7:0] $end
$var reg 1 B" without_load $end
$upscope $end
$scope module _rho_y $end
$var wire 1 % clk $end
$var wire 8 C" in [7:0] $end
$var wire 1 8 load $end
$var wire 1 D" rst $end
$var wire 8 E" rst_value [7:0] $end
$var reg 8 F" out [7:0] $end
$var reg 1 G" without_load $end
$upscope $end
$upscope $end
$upscope $end
$scope module _alu $end
$var wire 1 H" I_fig $end
$var wire 1 I" Q_fig $end
$var wire 8 J" action [7:0] $end
$var wire 80 K" border [79:0] $end
$var wire 8 L" figure [7:0] $end
$var wire 1 , is_move $end
$var wire 1 - is_reduce $end
$var wire 32 M" norm_rho_x [31:0] $end
$var wire 32 N" norm_rho_y [31:0] $end
$var wire 32 O" rho_x [31:0] $end
$var wire 32 P" rho_y [31:0] $end
$var reg 80 Q" new_border [79:0] $end
$var reg 32 R" new_rho_x [31:0] $end
$var reg 32 S" new_rho_y [31:0] $end
$scope module _reassign $end
$var wire 1 T" I_fig $end
$var wire 8 U" figure [7:0] $end
$var wire 32 V" rho_x [31:0] $end
$var wire 32 W" rho_y [31:0] $end
$var reg 32 X" change_rho_x [31:0] $end
$var reg 32 Y" change_rho_y [31:0] $end
$upscope $end
$upscope $end
$scope module _mem $end
$var wire 1 % clk $end
$var wire 80 Z" new_border [79:0] $end
$var wire 32 [" new_rho_x [31:0] $end
$var wire 32 \" new_rho_y [31:0] $end
$var wire 1 6 rst $end
$var wire 1 7 write_mem $end
$var reg 60 ]" is_colored [59:0] $end
$scope begin genblk1 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk0001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk00001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk000001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk0000001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk00000001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk000000001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$scope begin genblk0000000001 $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk02 $end
$upscope $end
$scope begin genblk002 $end
$upscope $end
$scope begin genblk0002 $end
$upscope $end
$scope begin genblk00002 $end
$upscope $end
$scope begin genblk000002 $end
$upscope $end
$upscope $end
$upscope $end
$scope module _fsm $end
$var wire 8 ^" action [7:0] $end
$var wire 80 _" border [79:0] $end
$var wire 8 `" figure [7:0] $end
$var wire 8 a" instr_addr [7:0] $end
$var wire 32 b" norm_rho_x [31:0] $end
$var wire 32 c" norm_rho_y [31:0] $end
$var wire 32 d" rho_x [31:0] $end
$var wire 32 e" rho_y [31:0] $end
$var integer 32 f" id_0 [31:0] $end
$var integer 32 g" id_1 [31:0] $end
$var integer 32 h" id_2 [31:0] $end
$var integer 32 i" id_3 [31:0] $end
$var reg 1 j" is_load_PC $end
$var reg 1 k" is_load_fig $end
$var reg 1 l" is_lose $end
$var reg 1 m" is_move $end
$var reg 1 n" is_reduce $end
$var reg 1 o" is_touch $end
$var reg 1 p" is_wait $end
$var reg 1 q" write_mem $end
$var reg 1 r" write_reg $end
$var integer 32 s" x_0 [31:0] $end
$var integer 32 t" x_1 [31:0] $end
$var integer 32 u" x_2 [31:0] $end
$var integer 32 v" x_3 [31:0] $end
$scope module _reassign $end
$var wire 1 w" I_fig $end
$var wire 8 x" figure [7:0] $end
$var wire 32 y" rho_x [31:0] $end
$var wire 32 z" rho_y [31:0] $end
$var reg 32 {" change_rho_x [31:0] $end
$var reg 32 |" change_rho_y [31:0] $end
$upscope $end
$scope begin assign_block $end
$var integer 32 }" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 }"
bx |"
bx {"
bx z"
bx y"
b1 x"
0w"
b0xxxxxxxx v"
b0xxxxxxxx u"
b0xxxxxxxx t"
b0xxxxxxxx s"
1r"
1q"
0p"
xo"
0n"
0m"
xl"
1k"
xj"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
b0 a"
b1 `"
b110000001100000011000000110000001100000011000000110000001100000011000000110 _"
b0 ^"
bx ]"
bx \"
bx ["
b110000001100000011000000110000001100000011000000110000001100000011000000110 Z"
bx Y"
bx X"
bx W"
bx V"
b1 U"
0T"
bx S"
bx R"
b110000001100000011000000110000001100000011000000110000001100000011000000110 Q"
bx P"
bx O"
bx N"
bx M"
b1 L"
b110000001100000011000000110000001100000011000000110000001100000011000000110 K"
b0 J"
1I"
0H"
xG"
bx F"
b1 E"
1D"
bx C"
xB"
bx A"
b101 @"
1?"
bx >"
x="
bx <"
b0 ;"
1:"
bx 9"
x8"
bx 7"
b101 6"
15"
bx 4"
x3"
bx 2"
b1 1"
10"
bx /"
x."
bx -"
b100 ,"
1+"
bx *"
x)"
bx ("
b0 '"
1&"
bx %"
x$"
bx #"
b100 ""
1!"
bx ~
x}
b110 |
b110 {
b110 z
xy
b110 x
b110 w
b110 v
xu
b110 t
b110 s
b110 r
xq
b110 p
b110 o
b110 n
xm
b110 l
b110 k
b110 j
xi
b110 h
b110 g
b110 f
xe
b110 d
b110 c
b110 b
xa
b110 `
b110 _
b110 ^
x]
b110 \
b110 [
b110 Z
xY
b110 X
b110 W
b110 V
b10000000000000001 U
b100000001000000010100000101 T
bx S
bx R
bx Q
bx P
b110000001100000011000000110000001100000011000000110000001100000011000000110 O
1N
b1 M
b110000001100000011000000110000001100000011000000110000001100000011000000110 L
1K
0J
b1 I
1H
b0 G
bz F
1E
1D
b1 C
b0 B
bz A
b0 @
b1 ?
b0 >
b1 =
b0 <
b1 ;
b0 :
b1 9
18
17
16
bx 5
bx 4
bx 3
bx 2
b1 1
b110000001100000011000000110000001100000011000000110000001100000011000000110 0
0/
x.
0-
0,
x+
1*
x)
b0 (
b1 '
b1 &
1%
b110000001100000011000000110000001100000011000000110000001100000011000000110 $
b0 #
1"
1!
$end
#5
0"
06
0!
0%
#10
1j"
1)
b10 C"
b1 9"
b10 /"
b1 %"
b101 >"
b101 4"
b100 *"
b100 ~
b1100000000110000000000000000000000000000000000 ]"
0D"
0?"
0:"
05"
00"
0+"
0&"
0!"
0N
0o"
0.
0l"
0+
b101 v"
b101 u"
b100 t"
b100 s"
b1010 }"
b1000000100000000100000010 S"
b1000000100000000100000010 3
b1000000100000000100000010 Q
b1000000100000000100000010 \"
b100000001000000010100000101 R"
b100000001000000010100000101 2
b100000001000000010100000101 P
b100000001000000010100000101 ["
1m"
1,
b101 i"
b101 h"
b100 g"
b100 f"
0k"
0*
1H
b10000000000000001 |"
b10000000000000001 c"
b100000001000000010100000101 {"
b100000001000000010100000101 b"
b10000000000000001 Y"
b10000000000000001 N"
b100000001000000010100000101 X"
b100000001000000010100000101 M"
b1 #
b1 J"
b1 ^"
b100 @
b100 G
b1 F"
b101 A"
b0 <"
b101 7"
b1 2"
b100 -"
b0 ("
b10000000000000001 5
b10000000000000001 S
b10000000000000001 P"
b10000000000000001 W"
b10000000000000001 e"
b10000000000000001 z"
b100 #"
b100000001000000010100000101 4
b100000001000000010100000101 R
b100000001000000010100000101 O"
b100000001000000010100000101 V"
b100000001000000010100000101 d"
b100000001000000010100000101 y"
b1 B
b100000001 '
b100000001 ?
b10000000000000000000000000000000 I
1!
1%
#15
0!
0%
#20
0H
b11 C"
b10 9"
b11 /"
b10 %"
b110000000011000000000000000000000000 ]"
b1010 }"
b10000000110000001000000011 3
b10000000110000001000000011 Q
b10000000110000001000000011 \"
b1000000100000000100000010 |"
b1000000100000000100000010 c"
b1000000100000000100000010 Y"
b1000000100000000100000010 N"
b10000000110000001000000011 S"
b110 @
b110 G
b10 F"
b1 <"
b10 2"
b1 ("
b1000000100000000100000010 5
b1000000100000000100000010 S
b1000000100000000100000010 P"
b1000000100000000100000010 W"
b1000000100000000100000010 e"
b1000000100000000100000010 z"
b1 :
b10 1
b10 9
b10 ;
b1 (
b1 <
b1 >
b1 a"
b11000000000000000000000000000000 I
1!
1%
#25
0!
0%
#30
0H
b100 C"
b11 9"
b100 /"
b11 %"
b11000000001100000000000000 ]"
b1010 }"
b11000001000000001100000100 3
b11000001000000001100000100 Q
b11000001000000001100000100 \"
b10000000110000001000000011 |"
b10000000110000001000000011 c"
b10000000110000001000000011 Y"
b10000000110000001000000011 N"
b11000001000000001100000100 S"
b11 @
b11 G
b11 F"
b10 <"
b11 2"
b10 ("
b10000000110000001000000011 5
b10000000110000001000000011 S
b10000000110000001000000011 P"
b10000000110000001000000011 W"
b10000000110000001000000011 e"
b10000000110000001000000011 z"
b1100000000000000000000000000000 I
b10 :
b11 1
b11 9
b11 ;
b10 (
b10 <
b10 >
b10 a"
1!
1%
#35
0!
0%
#40
1H
b101 C"
b100 9"
b101 /"
b100 %"
b1100000000110000 ]"
b1010 }"
b100000001010000010000000101 3
b100000001010000010000000101 Q
b100000001010000010000000101 \"
b11000001000000001100000100 |"
b11000001000000001100000100 c"
b11000001000000001100000100 Y"
b11000001000000001100000100 N"
b100000001010000010000000101 S"
b1 @
b1 G
b100 F"
b11 <"
b100 2"
b11 ("
b11000001000000001100000100 5
b11000001000000001100000100 S
b11000001000000001100000100 P"
b11000001000000001100000100 W"
b11000001000000001100000100 e"
b11000001000000001100000100 z"
b11 :
b100 1
b100 9
b100 ;
b11 (
b11 <
b11 >
b11 a"
b110000000000000000000000000000 I
1!
1%
#45
0!
0%
#50
0H
0m"
0,
b101 C"
b100 9"
b101 /"
b100 %"
b1100000000110000 ]"
b1010 }"
b100000001010000010000000101 3
b100000001010000010000000101 Q
b100000001010000010000000101 \"
b100000001010000010000000101 |"
b100000001010000010000000101 c"
b100000001010000010000000101 Y"
b100000001010000010000000101 N"
b100000001010000010000000101 S"
b100 @
b100 G
b101 F"
b100 <"
b101 2"
b100 ("
b100000001010000010000000101 5
b100000001010000010000000101 S
b100000001010000010000000101 P"
b100000001010000010000000101 W"
b100000001010000010000000101 e"
b100000001010000010000000101 z"
b10011000000000000000000000000000 I
b100 :
b101 1
b101 9
b101 ;
b100 (
b100 <
b100 >
b100 a"
1!
1%
#55
0!
0%
#60
b10 @
b10 G
b101 :
b110 1
b110 9
b110 ;
b101 (
b101 <
b101 >
b101 a"
b1001100000000000000000000000000 I
1!
1%
#65
0!
0%
#70
0H
b1 @
b1 G
b100110000000000000000000000000 I
b110 :
b111 1
b111 9
b111 ;
b110 (
b110 <
b110 >
b110 a"
1!
1%
#75
0!
0%
#80
1H
b0 @
b0 G
b111 :
b1000 1
b1000 9
b1000 ;
b111 (
b111 <
b111 >
b111 a"
b10011000000000000000000000000 I
1!
1%
#85
0!
0%
#90
0H
b100 @
b100 G
0q"
07
0r"
08
0j"
0)
b10001001100000000000000000000000 I
b1000 :
b1001 1
b1001 9
b1001 ;
b1000 (
b1000 <
b1000 >
b1000 a"
1!
1%
#95
0!
0%
#100
1H
b10 @
b10 G
0G"
0B"
0="
08"
03"
0."
0)"
0$"
b1000100110000000000000000000000 I
0Y
0]
0a
0e
0i
0m
0q
0u
0y
0}
1!
1%
#105
0!
0%
